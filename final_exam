# Problem 1
# This function receives a string (words separated by spaces) as parameter and returns a dictionary 
# whose keys are numbers and whose values are lists that contain unique words that have the number of letters equal to the keys.

def n_letter_dictionary(my_string):
   my_dict = {}
   wordlist = []
   wordlist1 = my_string.split()
   for each in wordlist1:
      wordlist.append(each.lower())
   wordlist = list(set(wordlist))
   for word1 in wordlist:
      length = len(word1)
      my_list = []
      for word2 in wordlist:
         if len(word2) == length:
            word2 = word2.lower()
            my_list.append(word2)
         my_list = list(set(my_list))
      my_dict[length]=sorted(my_list)
   return(my_dict)
   
# Problem 2
# Receives a file name and returns a dictionary that tells whether a student in this course passed or failed. 
# This is based on the following criteria: name, q1, q2, q3, q4, q5, q6, a1, a2, a3, a4, midterm, final
# "name" is a string and grades are integers
# Two of the lowest quizzes should be dropped and the average of the remaining four quizzes is worth 25% of the total grade.
# The lowest assignment score should be dropped and the average of the remaining three assignments is worth 25% of the total grade.
# Midterm and final exams are each 25% of the total grade.

def my_final_grade_calculation(filename):
   my_file = open(filename)
   students = my_file.readlines()
   my_dict = {}
   for student in students:
      data = student.split(',')
      for each in [1,2,3,4,5,6,7]:
         data[each] = int(data[each])
      quizzes = sorted(data[1:7])
      quizzes = quizzes[2:7]
      sum = 0
      for each in quizzes:
         sum = sum+int(each)
      quizaverage = sum/4
      for each in [7, 8, 9, 10, 11]:
         data[each] = int(data[each])
      assignments = sorted(data[7:11])
      assignments = assignments[1:4]
      sum = 0
      for each in assignments:
         sum = sum+int(each)
      assignmentaverage = sum/3
      average = .25*quizaverage + .25*assignmentaverage + .25*int(data[11]) + .25*int(data[12])
      if average >= 60:
         grade = "pass"
      else:
         grade = "fail"
      my_dict[data[0]] = grade
   return(my_dict)
   
# Problem 3
# Pascal's triangle

def MY_2D_LIST(n):
   biglist = []
   for each in range(n):
      biglist.append([])
   biglist[0].append(1)
   if n>1:
      biglist[1].append(1)
      biglist[1].append(1)
      if n>2:
         for each in range(2,n):
            biglist[each].append(1)
            for each1 in range(1,each):
               biglist[each].append(biglist[each-1][each1-1]+biglist[each-1][each1])
            biglist[each].append(1)
   return(biglist)
   
# Problem 4
# Receives a dictionary as input argument and returns a reverse of the input dictionary.
# The values of the original dictionary are used as keys for the returned dictionary.
# The keys of the original dictionary are used as value for the returned dictionary.

def reverse_dictionary(input_dict):
   mydict = input_dict
   endlist = []
   enddict = {}
   mylist = list(mydict.values())
   length = len(mylist)
   for each in range(length):
      length1 = len(mylist[each])
      for each1 in range(length1):
         enddict[mylist[each][each1].lower()]=[]
   for each in enddict:
      each1list = []
      for each1 in mydict:
         if each in mydict[each1] or each.capitalize() in mydict[each1]:
            each1list.append(each1.lower())
      enddict[each] = sorted(each1list)
   return(enddict)
